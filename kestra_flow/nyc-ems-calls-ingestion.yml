id: nyc-ems-calls-ingestion
namespace: ems

variables:
  end_date: "{{ now() | dateAdd(-20, 'YEARS') | date('yyyy-MM-dd') }}"
  start_date: "{{ render(vars.end_date) | dateAdd(-10, 'DAYS') | date('yyyy-MM-dd') }}"
  year: "{{ render(vars.end_date) | date('yyyy') }}"
  month: "{{ render(vars.end_date) | date('MM') }}"
  api_url: "https://data.cityofnewyork.us/resource/76xm-jjuj?$where=incident_datetime%20between%20'{{ render(vars.start_date) }}T00:00:00'%20and%20'{{ render(vars.end_date) }}T00:00:00'&$limit=50000" 
  file: "{{ render(vars.start_date) }}_{{ render(vars.end_date)}}_nyc-ems.csv"
  gcs_path: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.year}}/{{vars.month}}/{{vars.file}}"

tasks:
  - id: read_transform
    type: io.kestra.plugin.scripts.python.Script
    outputFiles:
      - "{{ render(vars.file) }}"
    beforeCommands: 
      - pip install pandas requests
    script: |
      import pandas as pd
      import requests
      import json

      r = requests.get("{{ vars.api_url }}")

      df = pd.DataFrame(json.loads(r.text)).fillna("")
      
      timestamp_columns = [
          'incident_datetime', 'first_assignment_datetime', 'first_activation_datetime', 
          'first_on_scene_datetime', 'first_to_hosp_datetime', 'first_hosp_arrival_datetime', 
          'incident_close_datetime'
      ]
      
      # Convert datetime columns while keeping empty strings
      df[timestamp_columns] = df[timestamp_columns].apply(lambda col: pd.to_datetime(col, errors='coerce').astype(str).replace("NaT", ""))
      
      # Extract year and month safely
      df['year'] = pd.to_datetime(df['incident_datetime'], errors='coerce').dt.year.fillna("").astype(str)
      df['month'] = pd.to_datetime(df['incident_datetime'], errors='coerce').dt.month.fillna("").astype(str)
      
      # Convert boolean columns correctly using `.replace()`
      bool_columns = [
          'valid_dispatch_rspns_time_indc', 'valid_incident_rspns_time_indc', 'held_indicator', 
          'reopen_indicator', 'special_event_indicator', 'standby_indicator', 'transfer_indicator'
      ]

      pd.set_option('future.no_silent_downcasting', True)
      df[bool_columns] = df[bool_columns].replace({'Y': True, 'N': False})
      
      df.to_csv("{{ render(vars.file) }}", index=False)

  - id: upload_to_gcs_prod
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ outputs.read_transform.outputFiles[ render(vars.file) ]}}"
    to: "{{ render(vars.gcs_path) }}"

triggers:
  - id: weekly-stop-after-fail
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "@weekly"
    stopAfter:
      - FAILED

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"